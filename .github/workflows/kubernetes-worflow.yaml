name: Solar System Workflow *


on:
  workflow_dispatch:
#   push:
#     branches:
#       - main
#       - 'feature/*'
#





jobs:
#   unit-testing: … 
#   code-coverage: … 
#   docker: 
  docker-build:
    name: docker build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Docker Hub Login
      uses: docker/login-action@v2.2.0
      with:
       username: ${{ vars.DOCKERHUB_USERNAME }}
       password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build Docker Image for Testing
      uses: docker/build-push-action@v4
      with:
       context: .
       file: ./Dockerfile
       push: true
       tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
  dev-deploy:
    name: Deploy to Dev Env
    runs-on: ubuntu-latest
    needs: docker-build
    env:
      MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
      MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install kubectl CLI
      uses: azure/setup-kubectl@v4
      with:
            version: 'v1.26.0'

    - name: Set Kubeconfig Context
      uses: azure/k8s-set-context@v3
      with:
       method: kubeconfig
       kubeconfig: ${{ secrets.KUBECONFIG }}

    - name: Fetch Kubernetes Cluster Details
      run: |
            kubectl version 
            echo "-----------------------------------------"
            kubectl get nodes

    - name: Replace tokens in manifests
      uses: cschleiden/replace-tokens@v1
      with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files:
             kubernetes/development/*.yaml
      env:
        NAMESPACE: ${{ vars.NAMESPACE }}
        REPLICAS: ${{ vars.REPLICAS }}
        IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
           
       


    - name: Show processed manifests
      run: cat kubernetes/development/*.yaml

    - name: Create Namespace if not exists
      run: |
             kubectl get namespace ${{ vars.NAMESPACE }} || \
             kubectl create namespace ${{ vars.NAMESPACE }}


    - name: Create MongoDB secret
      run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -


    - name: Deploy manifests
      run: kubectl apply -f kubernetes/development
